--- a/drivers/misc/wl127x-rfkill.c	2015-04-30 18:09:17.000000000 +0100
+++ b/drivers/misc/wl127x-rfkill.c	2018-04-30 19:22:50.247719512 +0100
@@ -30,92 +30,91 @@
 
 static int wl127x_rfkill_set_power(void *data, enum rfkill_state state)
 {
-	int nshutdown_gpio = (int) data;
+int nshutdown_gpio = (int) data;
 
-	switch (state) {
-	case RFKILL_STATE_UNBLOCKED:
-		gpio_set_value(nshutdown_gpio, 1);
-		break;
-	case RFKILL_STATE_SOFT_BLOCKED:
-		gpio_set_value(nshutdown_gpio, 0);
-		break;
-	default:
-		printk(KERN_ERR "invalid bluetooth rfkill state %d\n", state);
-	}
-	return 0;
+switch (state) {
+case RFKILL_STATE_UNBLOCKED:
+gpio_set_value(nshutdown_gpio, 1);
+break;
+case RFKILL_STATE_SOFT_BLOCKED:
+gpio_set_value(nshutdown_gpio, 0);
+break;
+default:
+printk(KERN_ERR invalid bluetooth rfkill state %dn, state);
+}
+return 0;
 }
 
 static int wl127x_rfkill_probe(struct platform_device *pdev)
 {
-	int rc = 0;
-	struct wl127x_rfkill_platform_data *pdata = pdev->dev.platform_data;
-	enum rfkill_state default_state = RFKILL_STATE_SOFT_BLOCKED;  /* off */
-
-	rc = gpio_request(pdata->nshutdown_gpio, "wl127x_nshutdown_gpio");
-	if (unlikely(rc))
-		return rc;
-
-	rc = gpio_direction_output(pdata->nshutdown_gpio, 0);
-	if (unlikely(rc))
-		return rc;
-
-	rfkill_set_default(RFKILL_TYPE_BLUETOOTH, default_state);
-	wl127x_rfkill_set_power(NULL, default_state);
-
-	pdata->rfkill = rfkill_allocate(&pdev->dev, RFKILL_TYPE_BLUETOOTH);
-	if (unlikely(!pdata->rfkill))
-		return -ENOMEM;
-
-	pdata->rfkill->name = "wl127x";
-	pdata->rfkill->state = default_state;
-	/* userspace cannot take exclusive control */
-	pdata->rfkill->user_claim_unsupported = 1;
-	pdata->rfkill->user_claim = 0;
-	pdata->rfkill->data = (void *) pdata->nshutdown_gpio;
-	pdata->rfkill->toggle_radio = wl127x_rfkill_set_power;
+int rc = 0;
+struct wl127x_rfkill_platform_data *pdata = pdev->dev.platform_data;
+enum rfkill_state default_state = RFKILL_STATE_SOFT_BLOCKED;  /* off */
+
+rc = gpio_request(pdata->nshutdown_gpio, wl127x_nshutdown_gpio);
+if (unlikely(rc))
+return rc;
+
+rc = gpio_direction_output(pdata->nshutdown_gpio, 0);
+if (unlikely(rc))
+return rc;
+
+rfkill_set_default(RFKILL_TYPE_BLUETOOTH, default_state);
+wl127x_rfkill_set_power(NULL, default_state);
+
+pdata->rfkill = rfkill_allocate(&pdev->dev, RFKILL_TYPE_BLUETOOTH);
+return -ENOMEM;
+
+pdata->rfkill->name = wl127x;
+pdata->rfkill->state = default_state;
+/* userspace cannot take exclusive control */
+pdata->rfkill->user_claim_unsupported = 1;
+pdata->rfkill->user_claim = 0;
+pdata->rfkill->data = (void *) pdata->nshutdown_gpio;
+pdata->rfkill->toggle_radio = wl127x_rfkill_set_power;
 
-	rc = rfkill_register(pdata->rfkill);
+rc = rfkill_register(pdata->rfkill);
 
-	if (unlikely(rc))
-		rfkill_free(pdata->rfkill);
+if (unlikely(rc))
+rfkill_free(pdata->rfkill);
 
-	return 0;
+return 0;
 }
 
 static int wl127x_rfkill_remove(struct platform_device *pdev)
 {
-	struct wl127x_rfkill_platform_data *pdata = pdev->dev.platform_data;
+struct wl127x_rfkill_platform_data *pdata = pdev->dev.platform_data;
 
-	rfkill_unregister(pdata->rfkill);
-	rfkill_free(pdata->rfkill);
-	gpio_free(pdata->nshutdown_gpio);
+rfkill_unregister(pdata->rfkill);
+rfkill_free(pdata->rfkill);
+gpio_free(pdata->nshutdown_gpio);
 
-	return 0;
+return 0;
 }
 
 static struct platform_driver wl127x_rfkill_platform_driver = {
-	.probe = wl127x_rfkill_probe,
-	.remove = wl127x_rfkill_remove,
-	.driver = {
-		   .name = "wl127x-rfkill",
-		   .owner = THIS_MODULE,
-		   },
+.probe = wl127x_rfkill_probe,
+.remove = wl127x_rfkill_remove,
+.driver = {
+   .name = wl127x-rfkill,
+   .owner = THIS_MODULE,
+   },
 };
 
 static int __init wl127x_rfkill_init(void)
 {
-	return platform_driver_register(&wl127x_rfkill_platform_driver);
+return platform_driver_register(&wl127x_rfkill_platform_driver);
 }
 
 static void __exit wl127x_rfkill_exit(void)
 {
-	platform_driver_unregister(&wl127x_rfkill_platform_driver);
+platform_driver_unregister(&wl127x_rfkill_platform_driver);
 }
 
 module_init(wl127x_rfkill_init);
 module_exit(wl127x_rfkill_exit);
 
-MODULE_ALIAS("platform:wl127x");
-MODULE_DESCRIPTION("wl127x-rfkill");
-MODULE_AUTHOR("Motorola");
-MODULE_LICENSE("GPL");
+MODULE_ALIAS(platform:wl127x);
+MODULE_DESCRIPTION(wl127x-rfkill);
+MODULE_AUTHOR(Motorola);
+MODULE_LICENSE(GPL);
